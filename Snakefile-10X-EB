# File Name: Snakefile-10X-EB
# Created By: ZW
# Created On: 2021-05-17
# description- runs scRNAseq pipeline for 10x Genomics-derived data in EBs


# read in analysis configuration details
configfile: "configs/config.yaml"
workdir: config["directories"]["working"]

temp_dir = config["directories"]["temp"]
fastq_dir = config["directories"]["fastq"]
data_dir = config["directories"]["data"]
results_dir = config["directories"]["results"]
resource_dir = config["resources"]

conda_envs = config["conda"]
experiment = config["experiment"]
samples = experiment["samples"].keys()

# define all output files from the workflow
rule all:
    input:
        expand(data_dir + "{sample}_web_summary.html", sample=samples),
        data_dir + "aggregation-files.csv",
        data_dir + "combined_web_summary.html"

# 1. define cellranger count task for alignment and counts generation
rule cellranger_count:
    params:
        id = "{sample}",
        transcriptome = resource_dir["reference"],
        fastq = fastq_dir
    output: data_dir + "{sample}_web_summary.html"
    conda: conda_envs["cellranger"]
    shell:
        "cd data/ && "
        "cellranger count --id={params.id} --sample={params.id}"
        " --transcriptome={params.transcriptome}"
        " --fastqs={params.fastq} && "
        "cp {params.id}/outs/web_summary.html {params.id}_web_summary.html"

# 2. define code to build a CSV for input into cellranger agg
rule build_aggregation_csv:
    input: expand(data_dir + "{sample}_web_summary.html", sample=samples) 
    params: 
        molecule_h5 = expand(data_dir + "{sample}/outs/molecule_info.h5",sample=samples),
        sample_id = expand("{sample}", sample=samples)
    output: agg_file = data_dir + "aggregation-files.csv"
    run:
        with open(output.agg_file, "w") as agg_file:
            agg_file.write("sample_id,molecule_h5\n")
            for s_id, m_h5 in zip(params.sample_id,params.molecule_h5):
                agg_file.write("{},{}\n".format(s_id,m_h5))

# 3. define cellranger agg task to combine results from individiual samples
rule cellranger_aggr:
    input: data_dir + "aggregation-files.csv"
    params: agg_id = "combined"
    output: data_dir + "combined_web_summary.html"
    conda: conda_envs["cellranger"]
    shell:
        "cd data/ && "
        "cellranger aggr --id={params.agg_id}"
        " --csv={input} &&"
        " cp {params.agg_id}/outs/web_summary.html {output}"

# TODO
#
# - figure out whether feature_reference.csv is generated during our runs
# - write python code to detect memory and number of cores for cellranger
#
#

